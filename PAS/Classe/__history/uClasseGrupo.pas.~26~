unit uClasseGrupo;

interface

uses
  uConn, Data.SqlExpr, Data.DB,System.classes;

Type
    TGrupo = class
    private
    // A varialve Conex�o receber a class da Unit uConn
    Conexao: TConn;
    // propriendades do usuario
    FId : String;
    FNome : string;
    FDtOpe : string;
    FInativo : String;

    FQry: TSQLQuery;
    FDs: TDataSource;
    FDsPesquisa: TDataSource;
    FQryPesquisa: TSQLQuery;
    procedure SetDs(const Value: TDataSource);
    procedure SetDsPesquisa(const Value: TDataSource);
    procedure SetQry(const Value: TSQLQuery);
    procedure SetQryPesquisa(const Value: TSQLQuery);
    procedure SetDtOpe(const Value: String);
    procedure SetId(const Value: String);
    procedure SetInativo(const Value: String);
    procedure SetNome(const Value: String);

    public
    constructor Create(Conn : TConn);

    // Propriedades
    property Id : String read FId write SetId;
    property Nome : String read FNome write SetNome;
    property DtOpe: String read FDtOpe write SetDtOpe;
    property Inativo: String read FInativo write SetInativo;

    // Componentes
    property Qry : TSQLQuery read FQry write SetQry;
    property QryPesquisa : TSQLQuery read FQryPesquisa write SetQryPesquisa;
    property Ds : TDataSource read FDs write SetDs;
    property DsPesquisa : TDataSource read FDsPesquisa write SetDsPesquisa;

    // Metodos
    function Inserir : Boolean;
    function UltimoRegistro : Integer;
    function Alterar : Boolean;
    function Status( Id : String ) : String;
    function ListaGrupo : TStrings;
    function IdGrupo( Nome : String ) : string;
end;

implementation

uses
  System.SysUtils, uBancoDados;

{ TGrupo }

constructor TGrupo.Create(Conn: TConn);
begin
  Conexao := Conn;
  Qry := TSQLQuery.Create(nil);
  Ds := TDataSource.Create(nil);

  QryPesquisa := TSQLQuery.Create(nil);
  DsPesquisa := TDataSource.Create(nil);
  // Conecta a Query no TSQLconnection
  Qry.SQLConnection := Conexao.ConexaoBanco;
  QryPesquisa.SQLConnection := Conexao.ConexaoBanco;

  Ds.DataSet := Qry;
  DsPesquisa.DataSet := QryPesquisa;
end;

function TGrupo.Inserir: Boolean;
begin
  with Qry do begin
    Close;
    SQL.Text := ' insert into figru (nmgru, dtope) values (:NMGRU, :DTOPE) ';
    Params.ParamByName('NMGRU').Value := FNome;
    Params.ParamByName('DTOPE').Value := Date; // Pega a data que esta fazedno o insert
    try
      ExecSQL();
      DM.cdsGrupo.Refresh;
      Result := True; // Retorna True se Executa sem erro
    except
      Result := False; // Retorna False se Executa com erro
    end;
  end;
end;

function TGrupo.UltimoRegistro: Integer;
begin
  with QryPesquisa do begin
    Close;
    SQL.Text := ' select max(cdgru) from figru ';
    try
      Open;
      Result := FieldByName('MAX').AsInteger + 1; // Retorna o registro do banco
    except
      Result := 0;
    end;
  end;
end;

function TGrupo.Alterar: Boolean;
begin
  with Qry do begin
    Close;
    SQL.Text := ' update FIgru set NMgru = :NMGRU , INATIVO = :INTV ' +
                ' where CDGRU = :CDGRU ';
    Params.ParamByName('NMGRU').Value:= FNome;
    Params.ParamByName('INTV').Value:= FInativo;
    Params.ParamByName('CDGRU').Value:= FId;
    try
      ExecSQL();
      DM.cdsGrupo.Refresh;
      Result := True;  // Retorna True se Executa sem erro
    except
      Result := False; // Retorna False se Executa com erro
    end;
  end;
end;

function TGrupo.Status( Id : String ) : String;
begin
  with QryPesquisa do begin
    Close;
    SQL.Text := ' select inativo from figru where cdgru = '+Id;
    try
      Open;
      Result := FieldByName('inativo').AsString; // Retorna o registro do banco
    except
      Result := '0';
    end;
  end;
end;

function TGrupo.ListaGrupo: TStrings;
begin
  Result := TStringList.Create;
  Result.Clear;
  Result.BeginUpdate;
  with QryPesquisa do begin
    Close;
      SQL.Text := ' Select NMGRU,cdgru From figru where inativo = ''N'' ';
    try
    Open;
    finally
      First;
      while not Eof do begin
        Result.Add(FieldByName('NMGRU').AsString);
        Next;
      end;
    end;
  end;
  Result.EndUpdate;
end;

function TGrupo.IdGrupo( Nome : String ) : string;
begin
  with QryPesquisa do begin
    Close;
    SQL.Text := ' select cdgru from figru where nmgru = :NMGRU';
    Params.ParamByName('NMGRU').Value := Nome;
    try
      Open;
      Result := FieldByName('cdgru').AsString; // Retorna o registro do banco
    except
      Result := '0';
    end;
  end;
end;

procedure TGrupo.SetDs(const Value: TDataSource);
begin
  FDs := Value;
end;

procedure TGrupo.SetDsPesquisa(const Value: TDataSource);
begin
  FDsPesquisa := Value;
end;

procedure TGrupo.SetDtOpe(const Value: String);
begin
  FDtOpe := Value;
end;

procedure TGrupo.SetId(const Value: String);
begin
  FId := Value;
end;

procedure TGrupo.SetInativo(const Value: String);
begin
  FInativo := Value;
end;

procedure TGrupo.SetNome(const Value: String);
begin
  if Value = EmptyStr then
    raise Exception.Create('Preenchar o Campo Nome Grupo!')
  else
    FNome := Value;
end;

procedure TGrupo.SetQry(const Value: TSQLQuery);
begin
  FQry := Value;
end;

procedure TGrupo.SetQryPesquisa(const Value: TSQLQuery);
begin
  FQryPesquisa := Value;
end;

end.
